=begin
#OrderCloud

#A full ecommerce backend as a service.

OpenAPI spec version: 1.0
Contact: ordercloud@four51.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'uri'
require 'singleton'

module OrderCloud
  class ApiAuth
    include Singleton

    private
    def self._base_body_for_auth(grant_type, client_secret = nil)
      body = {
        :client_id => OrderCloud::Configuration.default.client_id,
        :grant_type => grant_type,
      }

      if Configuration.default.scopes
        body = body.merge({ :scope => OrderCloud::Configuration.default.scopes.join("+") })
      end

      if client_secret
        body = body.merge({ :client_secret => client_secret })
      end

      body
    end

    private
    def self._request_access_token(body)
      request = Typhoeus::Request.new(
        OrderCloud::Configuration.default.auth_url,
        method: :post,
        body: URI.encode_www_form(body)
      )
      request.on_complete do |response|
        if response.success?
          token = JSON.parse(response.body)
          if(token.key?("error"))
            fail token["error"]
          else
          OrderCloud::Configuration.default.access_token = OrderCloud::AccessToken.new({
            :access_token => token["access_token"], 
            :expires_in => token["expires_in"],
            :token_type => token["token_type"]
          })
          end
        elsif response.timed_out?
          fail "HTTP Request timed out"
        elsif response.code == 0
          fail ArgumentError, "Empty response! Make sure you've set a Default User Context ID in the developer center. This is because the generated access token needs to be associated with some user."
        else
          fail NoMethodError, "Http request failed with #{response.code.to_s}. #{response.body}"
        end
      end
      request.run
    end

    def self.login(username, password, client_secret = nil)
      body = _base_body_for_auth("password", client_secret)

      body = body.merge({
        :username => username,
        :password => password
      })

      _request_access_token(body)
    end

    def self.authenticate(client_secret = nil)
      body = _base_body_for_auth("client_credentials", client_secret)

      _request_access_token(body)
    end

    def self.start_impersonate(impersonation_access_token)
      if not impersonation_access_token
        fail ArgumentError, "You must provide an access token in order to impersonate. Use UserApi.get_access_token to get an impersonation token"
      end

      OrderCloud::Configuration.default.impersonation_token = impersonation_access_token
    end

    def self.stop_impersonate
      OrderCloud::Configuration.default.impersonation_token = nil 
    end
  end
end
