=begin
#OrderCloud

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0
Contact: ordercloud@four51.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'

describe OrderCloud::ApiAuth do
  let(:valid_client_id) { 'BA89381F-E787-477D-B220-F8A01F0D582A' }
  let(:valid_username) { 'testo5' }
  let(:valid_password) { 'testo5' }
  let(:valid_client_secret) { '' }

  let(:invalid_client_id) { 've1fYQ0NXME13wa5JetO' }
  let(:invalid_username) { 'invaliduser' }
  let(:invalid_password) { 'invalidpassword' }
  let(:invalid_client_secret) { 'L6kzJlz1ewwYYeVozNCs' }

  let(:scopes) { ['FullAccess'] }
  let(:bad_auth_url) { 'thisshouldnotwork.com' }

  let(:impersonation_token) { OrderCloud::AccessToken.new({:access_token => '4QAtuGBvK8bj22XdT0H5', :expires_in => 1000, :token_type => 'Bearer' }) }

  let(:config) { OrderCloud::Configuration.default }
  before(:each) do
    OrderCloud::Configuration.reset
    OrderCloud.configure { |c|
      c.auth_url = "https://auth.ordercloud.io/oauth/token"
    }
  end

  describe '#password_flow' do
    context 'with valid data' do
      it 'does not raise error and set an access token' do
        OrderCloud.configure { |c|
          c.client_id = valid_client_id
          c.scopes = scopes
        }
        expect{ OrderCloud::ApiAuth::login(valid_username, valid_password)}.to_not raise_error
        expect(config.access_token).to_not be_nil
      end
    end

    context 'with invalid id or empty data' do
      it 'fails if the auth url is invalid' do
        OrderCloud.configure { |c|
          c.client_id = valid_client_id
          c.scopes = scopes
          c.auth_url = bad_auth_url
        }
        expect { OrderCloud::ApiAuth::login(valid_username, valid_password)}.to raise_error(ArgumentError)
        expect(config.access_token).to be_nil
      end

      it 'fails if the client id is not provided' do
        OrderCloud.configure { |c|
          c.scopes = scopes
        }
        expect { OrderCloud::ApiAuth::login(valid_username, valid_password)}.to raise_error(NoMethodError)
        expect(config.access_token).to be_nil
      end

      it 'fails if the client id is invalid' do
        OrderCloud.configure { |c|
          c.client_id = invalid_client_id
          c.scopes = scopes
        }
        expect { OrderCloud::ApiAuth::login(valid_username, valid_password)}.to raise_error(NoMethodError)
        expect(config.access_token).to be_nil
      end

      it 'fails if invalid login/username' do
        OrderCloud.configure { |c|
          c.client_id = valid_client_id
          c.scopes = @scopes
        }
        expect { OrderCloud::ApiAuth::login(invalid_username, invalid_password)}.to raise_error(NoMethodError)
        expect(config.access_token).to be_nil
      end
    end
  end

  describe '#client_credentials_flow' do
    it 'does not raise error and set an access token' do
      OrderCloud.configure { |c|
        c.client_id = valid_client_id
        c.scopes = scopes
      }
      expect{ OrderCloud::ApiAuth::authenticate()}.to_not raise_error
      expect(config.access_token).to_not be_nil
    end

    it 'fails if the auth url is invalid' do
      OrderCloud.configure { |c|
        c.client_id = valid_client_id
        c.scopes = scopes
        c.auth_url = bad_auth_url
      }
      expect { OrderCloud::ApiAuth::authenticate}.to raise_error(ArgumentError)
      expect(config.access_token).to be_nil
    end

    it 'fails if the client id is not provided' do
      OrderCloud.configure { |c|
        c.scopes = scopes
      }
      expect { OrderCloud::ApiAuth::authenticate}.to raise_error(NoMethodError)
      expect(config.access_token).to be_nil
    end

    it 'fails if the client id is invalid' do
      OrderCloud.configure { |c|
        c.client_id = invalid_client_id
        c.scopes = scopes
      }
      expect { OrderCloud::ApiAuth::authenticate}.to raise_error(NoMethodError)
      expect(config.access_token).to be_nil
    end
  end

  describe '#impersonation' do
    it 'succeeds when provided a token' do
      expect{ OrderCloud::ApiAuth.start_impersonate(impersonation_token)}.to_not raise_error
      expect(config.impersonating?).to be_truthy
    end

    it 'fails to start if not provided an impersonation token' do
      expect{ OrderCloud::ApiAuth.start_impersonate(nil)}.to raise_error(ArgumentError)
    end

    it 'stops impersonating properly' do
      OrderCloud::ApiAuth.start_impersonate(impersonation_token)
      expect(config.impersonating?).to be_truthy

      OrderCloud::ApiAuth.stop_impersonate()
      expect(config.impersonating?).to be_falsey
    end

    it 'returns the proper access tokens' do
      OrderCloud::ApiAuth.start_impersonate(impersonation_token)
      expect(config.get_access_token).to eq(impersonation_token)

      OrderCloud::ApiAuth.stop_impersonate()
      expect(config.get_access_token).to_not eq(impersonation_token)
    end
  end
end
