=begin
#OrderCloud

#A full ecommerce backend as a service.

OpenAPI spec version: 1.0
Contact: ordercloud@four51.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for OrderCloud::OrderApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'OrderApi' do
  before do
    # run before each test
    @instance = OrderCloud::OrderApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of OrderApi' do
    it 'should create an instact of OrderApi' do
      expect(@instance).to be_instance_of(OrderCloud::OrderApi)
    end
  end

  # unit tests for add_promotion
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order_id ID of the order.
  # @param promo_code Promo code of the order.
  # @param [Hash] opts the optional parameters
  # @return [Promotion]
  describe 'add_promotion test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for approve
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order_id ID of the order.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :comments Comments to be saved with the order approval.
  # @return [Order]
  describe 'approve test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for cancel
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order_id ID of the order.
  # @param [Hash] opts the optional parameters
  # @return [Order]
  describe 'cancel test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order 
  # @param [Hash] opts the optional parameters
  # @return [Order]
  describe 'create test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for decline
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order_id ID of the order.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :comments Comments to be saved with the order denial.
  # @return [Order]
  describe 'decline test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order_id ID of the order.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order_id ID of the order.
  # @param [Hash] opts the optional parameters
  # @return [Order]
  describe 'get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_approvals
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order_id ID of the order.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :search Word or phrase to search for.
  # @option opts [String] :search_on Comma-delimited list of fields to search on.
  # @option opts [String] :sort_by Comma-delimited list of fields to sort by.
  # @option opts [Integer] :page Page of results to return. Default: 1
  # @option opts [Integer] :page_size Number of results to return per page. Default: 20, max: 100.
  # @option opts [Hash<String, String>] :filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
  # @return [ListOrderApproval]
  describe 'list_approvals test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_eligible_approvers
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order_id ID of the order.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :search Word or phrase to search for.
  # @option opts [String] :search_on Comma-delimited list of fields to search on.
  # @option opts [String] :sort_by Comma-delimited list of fields to sort by.
  # @option opts [Integer] :page Page of results to return. Default: 1
  # @option opts [Integer] :page_size Number of results to return per page. Default: 20, max: 100.
  # @option opts [Hash<String, String>] :filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
  # @return [ListUser]
  describe 'list_eligible_approvers test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_incoming
  # 
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :buyer_id ID of the buyer.
  # @option opts [String] :from Lower bound of date range that the order was submitted.
  # @option opts [String] :to Upper bound of date range that the order was submitted.
  # @option opts [String] :search Word or phrase to search for.
  # @option opts [String] :search_on Comma-delimited list of fields to search on.
  # @option opts [String] :sort_by Comma-delimited list of fields to sort by.
  # @option opts [Integer] :page Page of results to return. Default: 1
  # @option opts [Integer] :page_size Number of results to return per page. Default: 20, max: 100.
  # @option opts [Hash<String, String>] :filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
  # @return [ListOrder]
  describe 'list_incoming test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_outgoing
  # 
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :buyer_id ID of the buyer.
  # @option opts [String] :from Lower bound of date range that the order was created.
  # @option opts [String] :to Upper bound of date range that the order was created.
  # @option opts [String] :search Word or phrase to search for.
  # @option opts [String] :search_on Comma-delimited list of fields to search on.
  # @option opts [String] :sort_by Comma-delimited list of fields to sort by.
  # @option opts [Integer] :page Page of results to return. Default: 1
  # @option opts [Integer] :page_size Number of results to return per page. Default: 20, max: 100.
  # @option opts [Hash<String, String>] :filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
  # @return [ListOrder]
  describe 'list_outgoing test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_promotions
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order_id ID of the order.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :search Word or phrase to search for.
  # @option opts [String] :search_on Comma-delimited list of fields to search on.
  # @option opts [String] :sort_by Comma-delimited list of fields to sort by.
  # @option opts [Integer] :page Page of results to return. Default: 1
  # @option opts [Integer] :page_size Number of results to return per page. Default: 20, max: 100.
  # @option opts [Hash<String, String>] :filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
  # @return [ListOrderPromotion]
  describe 'list_promotions test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order_id ID of the order.
  # @param partial_order 
  # @param [Hash] opts the optional parameters
  # @return [Order]
  describe 'patch test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_billing_address
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order_id ID of the order.
  # @param address 
  # @param [Hash] opts the optional parameters
  # @return [Order]
  describe 'patch_billing_address test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_shipping_address
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order_id ID of the order.
  # @param address 
  # @param [Hash] opts the optional parameters
  # @return [Order]
  describe 'patch_shipping_address test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_promotion
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order_id ID of the order.
  # @param promo_code Promo code of the order.
  # @param [Hash] opts the optional parameters
  # @return [Order]
  describe 'remove_promotion test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_billing_address
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order_id ID of the order.
  # @param address 
  # @param [Hash] opts the optional parameters
  # @return [Order]
  describe 'set_billing_address test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_shipping_address
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order_id ID of the order.
  # @param address 
  # @param [Hash] opts the optional parameters
  # @return [Order]
  describe 'set_shipping_address test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for ship
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order_id ID of the order.
  # @param shipment 
  # @param [Hash] opts the optional parameters
  # @return [Order]
  describe 'ship test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for submit
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order_id ID of the order.
  # @param [Hash] opts the optional parameters
  # @return [Order]
  describe 'submit test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transfer_temp_user_order
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param temp_user_token Temp user token of the order.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'transfer_temp_user_order test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update
  # 
  # 
  # @param buyer_id ID of the buyer.
  # @param order_id ID of the order.
  # @param order 
  # @param [Hash] opts the optional parameters
  # @return [Order]
  describe 'update test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
