=begin
#OrderCloud

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0
Contact: ordercloud@four51.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for OrderCloud::SpecApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'SpecApi' do
  before do
    # run before each test
    @instance = OrderCloud::SpecApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SpecApi' do
    it 'should create an instact of SpecApi' do
      expect(@instance).to be_instance_of(OrderCloud::SpecApi)
    end
  end

  # unit tests for create
  # 
  # 
  # @param spec 
  # @param [Hash] opts the optional parameters
  # @return [Spec]
  describe 'create test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_option
  # 
  # 
  # @param spec_id ID of the spec.
  # @param option 
  # @param [Hash] opts the optional parameters
  # @return [SpecOption]
  describe 'create_option test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete
  # 
  # 
  # @param spec_id ID of the spec.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_option
  # 
  # 
  # @param spec_id ID of the spec.
  # @param option_id ID of the option.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_option test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_product_assignment
  # 
  # 
  # @param spec_id ID of the spec.
  # @param product_id ID of the product.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_product_assignment test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get
  # 
  # 
  # @param spec_id ID of the spec.
  # @param [Hash] opts the optional parameters
  # @return [Spec]
  describe 'get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_option
  # 
  # 
  # @param spec_id ID of the spec.
  # @param option_id ID of the option.
  # @param [Hash] opts the optional parameters
  # @return [SpecOption]
  describe 'get_option test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list
  # 
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :search Word or phrase to search for.
  # @option opts [String] :search_on Comma-delimited list of fields to search on.
  # @option opts [String] :sort_by Comma-delimited list of fields to sort by.
  # @option opts [Integer] :page Page of results to return. Default: 1
  # @option opts [Integer] :page_size Number of results to return per page. Default: 20, max: 100.
  # @option opts [Hash<String, String>] :filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
  # @return [ListSpec]
  describe 'list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_options
  # 
  # 
  # @param spec_id ID of the spec.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :search Word or phrase to search for.
  # @option opts [String] :search_on Comma-delimited list of fields to search on.
  # @option opts [String] :sort_by Comma-delimited list of fields to sort by.
  # @option opts [Integer] :page Page of results to return. Default: 1
  # @option opts [Integer] :page_size Number of results to return per page. Default: 20, max: 100.
  # @option opts [Hash<String, String>] :filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
  # @return [ListSpecOption]
  describe 'list_options test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_product_assignments
  # 
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :spec_id ID of the spec.
  # @option opts [String] :product_id ID of the product.
  # @option opts [Integer] :page Page of results to return. Default: 1
  # @option opts [Integer] :page_size Number of results to return per page. Default: 20, max: 100.
  # @return [ListSpecProductAssignment]
  describe 'list_product_assignments test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch
  # 
  # 
  # @param spec_id ID of the spec.
  # @param spec 
  # @param [Hash] opts the optional parameters
  # @return [Spec]
  describe 'patch test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_option
  # 
  # 
  # @param spec_id ID of the spec.
  # @param option_id ID of the option.
  # @param option 
  # @param [Hash] opts the optional parameters
  # @return [SpecOption]
  describe 'patch_option test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_product_assignment
  # 
  # 
  # @param product_assignment 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'save_product_assignment test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update
  # 
  # 
  # @param spec_id ID of the spec.
  # @param spec 
  # @param [Hash] opts the optional parameters
  # @return [Spec]
  describe 'update test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_option
  # 
  # 
  # @param spec_id ID of the spec.
  # @param option_id ID of the option.
  # @param option 
  # @param [Hash] opts the optional parameters
  # @return [SpecOption]
  describe 'update_option test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
